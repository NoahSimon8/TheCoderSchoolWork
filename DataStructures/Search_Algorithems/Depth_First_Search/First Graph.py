

class pathFinding():
    def __init__(self,g):
        self.graph=g
        self.visited=[]
        self.finish=False
        self.solvable=False


    def depthFirstSearch(self,current,end):
        if self.solvable or current in self.visited:
            return self.solvable
        else:
            if current==end:
                self.solvable=True
            for i in self.graph[current]:
                if i not in self.visited:
                    self.visited.append(current)
                    current=i
                    return self.depthFirstSearch(current,end)

    # def depth_first_search(self, node):
        #     if node in self.visited:
        #         return
        #     else:
        #         self.visited.append(node)
        #         for adj in self.graph[node]:
        #             self.depth_first_search(adj)


graph={'A':['D'],
       'B':['C','F'],
       'C':['B','D'],
       'D':['F','C','A'],
       'E':['H','G'],
       'F':['D','B'],
       'G':['E','H'],
       'H':['G','E']}


dictionary = {1: [26], 3: [28], 5: [30], 7: [], 9: [10, 34], 10: [11, 35, 9], 11: [12, 36, 10], 12: [13, 37, 11], 13: [38, 12], 15: [16, 40], 16: [17, 41, 15], 17: [16], 20: [21, 45], 21: [22, 46, 20], 22: [47, 21], 24: [25, 49], 25: [50, 24], 26: [27, 1], 27: [28, 26], 28: [53, 3, 27], 30: [5], 34: [35, 59, 9], 35: [36, 60, 10, 34], 36: [37, 11, 35], 37: [38, 62, 12, 36], 38: [63, 13, 37], 40: [41, 65, 15], 41: [66, 16, 40], 43: [68], 45: [46, 20], 46: [47, 71, 21, 45], 47: [48, 22, 46], 48: [49, 73, 47], 49: [50, 74, 24, 48], 50: [75, 25, 49], 53: [54, 78, 28], 54: [79, 53], 56: [57, 81], 57: [58, 56], 58: [59, 57], 59: [60, 84, 34, 58], 60: [85, 35, 59], 62: [63, 87, 37], 63: [88, 38, 62], 65: [66, 90, 40], 66: [91, 41, 65], 68: [43], 71: [46], 73: [74, 98, 48], 74: [75, 49, 73], 75: [100, 50, 74], 76: [77], 77: [78, 102, 76], 78: [79, 103, 53, 77], 79: [80, 54, 78], 80: [81, 79], 81: [106, 56, 80], 84: [85, 109, 59], 85: [86, 110, 60, 84], 86: [87, 85], 87: [88, 112, 62, 86], 88: [113, 63, 87], 90: [91, 65], 91: [92, 116, 66, 90], 92: [117, 91], 94: [95, 119], 95: [120, 94], 97: [98, 122], 98: [123, 73, 97], 100: [125, 75], 102: [103, 127, 77], 103: [78, 102], 106: [107, 131, 81], 107: [108, 132, 106], 108: [109, 133, 107], 109: [110, 134, 84, 108], 110: [85, 109], 112: [113, 137, 87], 113: [114, 138, 88, 112], 114: [139, 113], 116: [117, 91], 117: [118, 142, 92, 116], 118: [119, 143, 117], 119: [120, 144, 94, 118], 120: [121, 145, 95, 119], 121: [122, 146, 120], 122: [123, 97, 121], 123: [124, 148, 98, 122], 124: [125, 123], 125: [150, 100, 124], 126: [127, 151], 127: [152, 102, 126], 129: [154], 131: [132, 156, 106], 132: [133, 107, 131], 133: [134, 158, 108, 132], 134: [159, 109, 133], 136: [137, 161], 137: [138, 162, 112, 136], 138: [139, 113, 137], 139: [140, 164, 114, 138], 140: [165, 139], 142: [143, 167, 117], 143: [144, 118, 142], 144: [145, 119, 143], 145: [146, 170, 120, 144], 146: [171, 121, 145], 148: [123], 150: [175, 125], 151: [152, 126], 152: [153, 177, 127, 151], 153: [154, 178, 152], 154: [155, 129, 153], 155: [156, 180, 154], 156: [181, 131, 155], 158: [159, 183, 133], 159: [160, 184, 134, 158], 160: [161, 159], 161: [162, 186, 136, 160], 162: [137, 161], 164: [165, 189, 139], 165: [190, 140, 164], 167: [142], 170: [171, 145], 171: [172, 196, 146, 170], 172: [197, 171], 175: [200, 150], 177: [178, 202, 152], 178: [203, 153, 177], 180: [181, 205, 155], 181: [182, 156, 180], 182: [183, 207, 181], 183: [184, 158, 182], 184: [209, 159, 183], 186: [161], 189: [190, 214, 164], 190: [191, 215, 165, 189], 191: [216, 190], 196: [197, 221, 171], 197: [198, 222, 172, 196], 198: [199, 223, 197], 199: [200, 224, 198], 200: [175, 199], 201: [202, 226], 202: [203, 177, 201], 203: [204, 228, 178, 202], 204: [205, 229, 203], 205: [230, 180, 204], 207: [232, 182], 209: [184], 212: [213], 213: [214, 238, 212], 214: [215, 239, 189, 213], 215: [216, 240, 190, 214], 216: [217, 191, 215], 217: [218, 242, 216], 218: [219, 243, 217], 219: [220, 244, 218], 220: [221, 245, 219], 221: [222, 196, 220], 222: [223, 247, 197, 221], 223: [224, 248, 198, 222], 224: [249, 199, 223], 226: [201], 228: [229, 253, 203], 229: [230, 254, 204, 228], 230: [231, 255, 205, 229], 231: [232, 256, 230], 232: [257, 207, 231], 235: [260], 238: [239, 263, 213], 239: [240, 214, 238], 240: [265, 215, 239], 242: [243, 217], 243: [244, 218, 242], 244: [245, 269, 219, 243], 245: [270, 220, 244], 247: [248, 272, 222], 248: [249, 273, 223, 247], 249: [250, 274, 224, 248], 250: [275, 249], 252: [253, 277], 253: [254, 228, 252], 254: [255, 279, 229, 253], 255: [256, 280, 230, 254], 256: [257, 281, 231, 255], 257: [258, 282, 232, 256], 258: [283, 257], 260: [261, 235], 261: [286, 260], 263: [288, 238], 265: [290, 240], 269: [270, 244], 270: [295, 245, 269], 272: [273, 297, 247], 273: [274, 248, 272], 274: [275, 299, 249, 273], 275: [250, 274], 276: [277, 301], 277: [252, 276], 279: [280, 304, 254], 280: [281, 255, 279], 281: [282, 306, 256, 280], 282: [283, 307, 257, 281], 283: [284, 308, 258, 282], 284: [283], 286: [261], 288: [313, 263], 290: [291, 265], 291: [292, 316, 290], 292: [293, 317, 291], 293: [318, 292], 295: [320, 270], 297: [322, 272], 299: [324, 274], 301: [326, 276], 303: [304, 328], 304: [329, 279, 303], 306: [307, 281], 307: [308, 332, 282, 306], 308: [333, 283, 307], 310: [335], 312: [313, 337], 313: [314, 288, 312], 314: [339, 313], 316: [317, 291], 317: [318, 342, 292, 316], 318: [319, 293, 317], 319: [320, 344, 318], 320: [295, 319], 322: [323, 347, 297], 323: [324, 348, 322], 324: [325, 299, 323], 325: [350, 324], 326: [327, 301], 327: [328, 352, 326], 328: [329, 353, 303, 327], 329: [330, 354, 304, 328], 330: [355, 329], 332: [333, 307], 333: [334, 358, 308, 332], 334: [335, 359, 333], 335: [336, 310, 334], 336: [337, 361, 335], 337: [362, 312, 336], 339: [364, 314], 342: [317], 344: [369, 319], 346: [347, 371], 347: [348, 372, 322, 346], 348: [323, 347], 350: [375, 325], 352: [353, 377, 327], 353: [354, 378, 328, 352], 354: [355, 329, 353], 355: [356, 380, 330, 354], 356: [355], 358: [359, 383, 333], 359: [384, 334, 358], 361: [362, 386, 336], 362: [363, 387, 337, 361], 363: [364, 362], 364: [365, 389, 339, 363], 365: [366, 390, 364], 366: [391, 365], 368: [369, 393], 369: [394, 344, 368], 371: [372, 396, 346], 372: [347, 371], 374: [375, 399], 375: [400, 350, 374], 376: [377, 401], 377: [378, 402, 352, 376], 378: [403, 353, 377], 380: [405, 355], 382: [383, 407], 383: [384, 408, 358, 382], 384: [385, 359, 383], 385: [386, 410, 384], 386: [387, 411, 361, 385], 387: [412, 362, 386], 389: [390, 414, 364], 390: [391, 365, 389], 391: [392, 416, 366, 390], 392: [393, 417, 391], 393: [394, 418, 368, 392], 394: [395, 419, 369, 393], 395: [396, 420, 394], 396: [421, 371, 395], 398: [399, 423], 399: [400, 374, 398], 400: [425, 375, 399], 401: [402, 426, 376], 402: [403, 427, 377, 401], 403: [404, 378, 402], 404: [405, 429, 403], 405: [406, 430, 380, 404], 406: [407, 431, 405], 407: [408, 432, 382, 406], 408: [433, 383, 407], 410: [411, 385], 411: [412, 436, 386, 410], 412: [413, 437, 387, 411], 413: [414, 438, 412], 414: [439, 389, 413], 416: [417, 441, 391], 417: [418, 442, 392, 416], 418: [419, 443, 393, 417], 419: [420, 444, 394, 418], 420: [421, 445, 395, 419], 421: [422, 396, 420], 422: [423, 447, 421], 423: [448, 398, 422], 425: [450, 400], 426: [427, 451, 401], 427: [452, 402, 426], 429: [430, 454, 404], 430: [431, 455, 405, 429], 431: [432, 406, 430], 432: [433, 457, 407, 431], 433: [434, 408, 432], 434: [459, 433], 436: [437, 461, 411], 437: [438, 462, 412, 436], 438: [439, 413, 437], 439: [440, 464, 414, 438], 440: [441, 465, 439], 441: [442, 416, 440], 442: [443, 467, 417, 441], 443: [444, 468, 418, 442], 444: [445, 469, 419, 443], 445: [470, 420, 444], 447: [448, 422], 448: [449, 473, 423, 447], 449: [450, 474, 448], 450: [475, 425, 449], 451: [452, 426], 452: [453, 477, 427, 451], 453: [454, 478, 452], 454: [455, 479, 429, 453], 455: [480, 430, 454], 457: [482, 432], 459: [460, 484, 434], 460: [461, 459], 461: [462, 486, 436, 460], 462: [487, 437, 461], 464: [465, 489, 439], 465: [440, 464], 467: [468, 492, 442], 468: [469, 493, 443, 467], 469: [470, 494, 444, 468], 470: [445, 469], 473: [474, 498, 448], 474: [475, 449, 473], 475: [500, 450, 474], 477: [478, 502, 452], 478: [479, 503, 453, 477], 479: [480, 504, 454, 478], 480: [481, 455, 479], 481: [482, 506, 480], 482: [483, 507, 457, 481], 483: [484, 482], 484: [459, 483], 486: [487, 461], 487: [488, 512, 462, 486], 488: [489, 513, 487], 489: [464, 488], 491: [492, 516], 492: [493, 517, 467, 491], 493: [494, 518, 468, 492], 494: [519, 469, 493], 496: [497, 521], 497: [498, 522, 496], 498: [523, 473, 497], 500: [525, 475], 502: [503, 527, 477], 503: [504, 528, 478, 502], 504: [529, 479, 503], 506: [507, 531, 481], 507: [482, 506], 512: [513, 537, 487], 513: [488, 512], 515: [516, 540], 516: [517, 491, 515], 517: [518, 542, 492, 516], 518: [519, 543, 493, 517], 519: [520, 544, 494, 518], 520: [521, 545, 519], 521: [522, 546, 496, 520], 522: [523, 547, 497, 521], 523: [548, 498, 522], 525: [550, 500], 526: [527, 551], 527: [528, 502, 526], 528: [529, 503, 527], 529: [530, 554, 504, 528], 530: [531, 555, 529], 531: [556, 506, 530], 534: [535, 559], 535: [536, 560, 534], 536: [537, 561, 535], 537: [562, 512, 536], 540: [515], 542: [543, 517], 543: [544, 568, 518, 542], 544: [545, 519, 543], 545: [546, 520, 544], 546: [547, 571, 521, 545], 547: [548, 522, 546], 548: [549, 523, 547], 549: [550, 548], 550: [575, 525, 549], 551: [526], 554: [555, 579, 529], 555: [556, 580, 530, 554], 556: [557, 581, 531, 555], 557: [558, 556], 558: [559, 583, 557], 559: [560, 584, 534, 558], 560: [561, 585, 535, 559], 561: [562, 586, 536, 560], 562: [563, 587, 537, 561], 563: [564, 588, 562], 564: [563], 568: [593, 543], 571: [596, 546], 575: [600, 550], 577: [602], 579: [580, 604, 554], 580: [581, 605, 555, 579], 581: [606, 556, 580], 583: [584, 608, 558], 584: [585, 559, 583], 585: [586, 560, 584], 586: [587, 611, 561, 585], 587: [588, 562, 586], 588: [613, 563, 587], 590: [591, 615], 591: [592, 590], 592: [593, 617, 591], 593: [594, 618, 568, 592], 594: [595, 593], 595: [596, 594], 596: [597, 621, 571, 595], 597: [622, 596], 599: [600, 624], 600: [625, 575, 599], 601: [602], 602: [603, 577, 601], 603: [604, 602], 604: [605, 579, 603], 605: [606, 580, 604], 606: [607, 581, 605], 607: [608, 606], 608: [583, 607], 611: [586], 613: [614, 588], 614: [615, 613], 615: [590, 614], 617: [618, 592], 618: [593, 617], 621: [622, 596], 622: [597, 621], 624: [625, 599], 625: [600, 624]}
aList=[[0,1,2,3,4,5,0],
       [0,6,7,8,9,10,0]]


p=pathFinding(graph)
connects=p.depthFirstSearch(1,110)
if connects!=True:
    connects=False
print(connects)
print(p.visited)
